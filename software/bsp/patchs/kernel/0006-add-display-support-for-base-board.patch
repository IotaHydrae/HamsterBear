From 457bdfceda1a025494a98890c1bee29ebe83c89e Mon Sep 17 00:00:00 2001
From: IotaHydrae <writeforever@foxmail.com>
Date: Tue, 5 Jul 2022 10:07:00 +0800
Subject: [PATCH 6/7] add display support for base board

Signed-off-by: IotaHydrae <writeforever@foxmail.com>
---
 drivers/staging/fbtft/fb_st7789v.c | 43 +++++++++++++++++++-
 drivers/staging/fbtft/fbtft-core.c | 65 +++++++++++++++++++++---------
 2 files changed, 88 insertions(+), 20 deletions(-)

diff --git a/drivers/staging/fbtft/fb_st7789v.c b/drivers/staging/fbtft/fb_st7789v.c
index 861a15414..20cbe4f9c 100644
--- a/drivers/staging/fbtft/fb_st7789v.c
+++ b/drivers/staging/fbtft/fb_st7789v.c
@@ -140,6 +140,8 @@ static int init_tearing_effect_line(struct fbtft_par *par)
  *
  * Return: 0 on success, < 0 if error occurred.
  */
+
+#if 0
 static int init_display(struct fbtft_par *par)
 {
 	int rc;
@@ -216,6 +218,45 @@ static int init_display(struct fbtft_par *par)
 
 	return 0;
 }
+#endif
+
+static int init_display(struct fbtft_par *par)
+{
+        par->fbtftops.reset(par);
+	mdelay(50);
+	//************* Start Initial Sequence **********//
+write_reg(par, 0x11); //Sleep out
+mdelay(120);     //Delay 120ms
+//************* Start Initial Sequence **********//
+write_reg(par, 0x36, 0x00);
+
+write_reg(par, 0x3A, 0x05);
+
+write_reg(par, 0xB2,0x0C,0x0C,0x00,0x33,0x33);
+
+write_reg(par, 0xB7,0x35);
+
+write_reg(par, 0xBB, 0x32);     //Vcom=1.35V
+
+write_reg(par, 0xC2, 0x01);
+
+write_reg(par, 0xC3,0x15);     //GVDD=4.8V
+
+write_reg(par, 0xC4, 0x20);     //VDV, 0x20:0v
+
+write_reg(par, 0xC6,0x0F);    //0x0F:60Hz
+
+write_reg(par, 0xD0, 0xA4, 0xA1);
+
+write_reg(par, 0xE0,0xD0,0x08,0x0E,0x09,0x09,0x05,0x31,0x33,0x48,0x17,0x14,0x15,0x31,0x34);
+
+write_reg(par, 0xE1,0xD0,0x08,0x0E,0x09,0x09,0x15,0x31,0x33,0x48,0x17,0x14,0x15,0x31,0x34);
+
+write_reg(par, 0x21);
+
+write_reg(par, 0x29);
+	return 0;
+}
 
 /*
  * write_vmem() - write data to display.
@@ -369,7 +410,7 @@ static int blank(struct fbtft_par *par, bool on)
 static struct fbtft_display display = {
 	.regwidth = 8,
 	.width = 240,
-	.height = 320,
+	.height = 280,
 	.gamma_num = 2,
 	.gamma_len = 14,
 	.gamma = HSD20_IPS_GAMMA,
diff --git a/drivers/staging/fbtft/fbtft-core.c b/drivers/staging/fbtft/fbtft-core.c
index f2684d2d6..665c3d142 100644
--- a/drivers/staging/fbtft/fbtft-core.c
+++ b/drivers/staging/fbtft/fbtft-core.c
@@ -24,7 +24,8 @@
 #include <linux/platform_device.h>
 #include <linux/property.h>
 #include <linux/spinlock.h>
-
+#include <linux/of.h>
+#include <linux/of_gpio.h>
 #include <video/mipi_display.h>
 
 #include "fbtft.h"
@@ -74,17 +75,42 @@ static int fbtft_request_one_gpio(struct fbtft_par *par,
 				  const char *name, int index,
 				  struct gpio_desc **gpiop)
 {
-	struct device *dev = par->info->device;
-
-	*gpiop = devm_gpiod_get_index_optional(dev, name, index,
-					       GPIOD_OUT_LOW);
-	if (IS_ERR(*gpiop))
-		return dev_err_probe(dev, PTR_ERR(*gpiop), "Failed to request %s GPIO\n", name);
+        struct device *dev = par->info->device;
+        struct device_node *node = dev->of_node;
+        int gpio, flags, ret = 0;
+        enum of_gpio_flags of_flags;
+
+        if (of_find_property(node, name, NULL)) {
+                gpio = of_get_named_gpio_flags(node, name, index, &of_flags);
+                if (gpio == -ENOENT)
+                        return 0;
+                if (gpio == -EPROBE_DEFER)
+                        return gpio;
+                if (gpio < 0) {
+                        dev_err(dev,
+                                "failed to get '%s' from DT\n", name);
+                        return gpio;
+                }
+
+                /* active low translates to initially low */
+                flags = (of_flags & OF_GPIO_ACTIVE_LOW) ? GPIOF_OUT_INIT_LOW :
+                                                        GPIOF_OUT_INIT_HIGH;
+                ret = devm_gpio_request_one(dev, gpio, flags,
+                                            dev->driver->name);
+                if (ret) {
+                        dev_err(dev,
+                                "gpio_request_one('%s'=%d) failed with %d\n",
+                                name, gpio, ret);
+                        return ret;
+                }
+                if (gpiop)
+                        *gpiop = gpio_to_desc(gpio);
+                fbtft_par_dbg(DEBUG_REQUEST_GPIOS, par, "%s: '%s' = GPIO%d\n",
+                              __func__, name, gpio);
+        }
+
+        return ret;
 
-	fbtft_par_dbg(DEBUG_REQUEST_GPIOS, par, "%s: '%s' GPIO\n",
-		      __func__, name);
-
-	return 0;
 }
 
 static int fbtft_request_gpios(struct fbtft_par *par)
@@ -92,10 +118,10 @@ static int fbtft_request_gpios(struct fbtft_par *par)
 	int i;
 	int ret;
 
-	ret = fbtft_request_one_gpio(par, "reset", 0, &par->gpio.reset);
+	ret = fbtft_request_one_gpio(par, "reset-gpios", 0, &par->gpio.reset);
 	if (ret)
 		return ret;
-	ret = fbtft_request_one_gpio(par, "dc", 0, &par->gpio.dc);
+	ret = fbtft_request_one_gpio(par, "dc-gpios", 0, &par->gpio.dc);
 	if (ret)
 		return ret;
 	ret = fbtft_request_one_gpio(par, "rd", 0, &par->gpio.rd);
@@ -203,6 +229,9 @@ EXPORT_SYMBOL(fbtft_register_backlight);
 static void fbtft_set_addr_win(struct fbtft_par *par, int xs, int ys, int xe,
 			       int ye)
 {
+	xs = xs + 20;
+	xe = xe + 20;
+
 	write_reg(par, MIPI_DCS_SET_COLUMN_ADDRESS,
 		  (xs >> 8) & 0xFF, xs & 0xFF, (xe >> 8) & 0xFF, xe & 0xFF);
 
@@ -216,15 +245,13 @@ static void fbtft_reset(struct fbtft_par *par)
 {
 	if (!par->gpio.reset)
 		return;
-
 	fbtft_par_dbg(DEBUG_RESET, par, "%s()\n", __func__);
-
 	gpiod_set_value_cansleep(par->gpio.reset, 1);
-	usleep_range(20, 40);
+	msleep(10);
 	gpiod_set_value_cansleep(par->gpio.reset, 0);
-	msleep(120);
-
-	gpiod_set_value_cansleep(par->gpio.cs, 1);  /* Activate chip */
+	msleep(200);
+	gpiod_set_value_cansleep(par->gpio.reset, 1);
+	msleep(10);
 }
 
 static void fbtft_update_display(struct fbtft_par *par, unsigned int start_line,
-- 
2.34.1

